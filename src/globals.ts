/**
* Global objects and methods
* @author Rob Miller
* @copyright 2018
*/
import { Injector } from '@angular/core';

/**
* This class contains static objects that can be referenced anywhere in the application
*/
export class Globals {
  //This is the service id used for Nearby. New ones should evetually be generated for each build
  public static serviceId: string = "4b89444e-71b7-4fed-90bf-271b8fa1c1b2";
}

/**
* This enum contains the types of broadcasts that can be sent by this application
*/
export enum BroadcastTypes {
  MESSAGE,
  CAMPAIGN
}

/**
* This method is an abstraction for printing a map to the console
* @param map The map to print. Keys must be strings, values can be anything
*/
export function debugMap(map: Map<string, any>): string {
  return JSON.stringify(Array.from(map.entries()).reduce(
    (json, [key, value]) => {
      json[key] = value;
      return json;
  }, {}));
}

/**
* Creates an identifier JSON object from a username, id, and endpointId
* @param username
* @param endpoint Nearby endpoint ID randomly generated by Google API
*/
export function generateIdentifier(userName: string, endpoint: string): string {
  return JSON.stringify({n: userName, e: endpoint});
}

/**
* Parses an identifier from a JSON string
* @param id
* @return identifier object
*/
export function parseIdentifier(id: string): any {
  let obj = JSON.parse(id);

  return {userName: obj.n, endpoint: obj.e};
}

/**
 * Allows for retrieving singletons using `AppInjector.get(MyService)` (whereas
 * `ReflectiveInjector.resolveAndCreate(MyService)` would create a new instance
 * of the service).
 */
export let ServiceInjector: Injector;

/**
 * Helper to set the exported {@link ServiceInjector}, needed as ES6 modules export
 * immutable bindings (see http://2ality.com/2015/07/es6-module-exports.html) for
 * which trying to make changes after using `import {AppInjector}` would throw:
 * "TS2539: Cannot assign to 'AppInjector' because it is not a variable".
 */
export function setServiceInjector(injector: Injector) {
    if (ServiceInjector) {
        // Should not happen
        console.error('ServiceInjector was already set');
    }
    else {
        ServiceInjector = injector;
    }
}
